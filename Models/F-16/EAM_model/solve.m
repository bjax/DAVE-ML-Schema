function [x,xhist] = solve(fname,x0,c,del,tol,ifd)%%  function [x,xhist] = solve(fname,x0,c,del,tol,ifd)%%  Usage: [x,xhist] = solve(fname,x0,c,del,tol,ifd);%%  Description:%%    Solves a set of nonlinear equations arranged so each nonlinear%    equation is set equal to zero.  The m-file containing%    the function descriptions is fname.  Modified Newton-Raphson%    iterations are used to arrive at the solution.  %%  Input:%    %   fname = name of the m-file that computes the system outputs.%      x0 = parameter vector initial condition.%       c = vector of constants passed to fname.%     del = vector of parameter perturbations in fraction of nominal value.%     tol = distance in parameter space that defines convergence.%     ifd = 1 for central differences.%           0 for forward differences.%%  Output:%%        x = minimizing parameter vector.%    xhist = sequence of parameter vectors.%%%    Calls:%      None%%    Author:  Eugene A. Morelli%%    History:  %      24 Apr 1995 - Created and debugged, EAM.%%%  Copyright (C) 2000  Eugene A. Morelli%%%  This program carries no warranty, not even the implied %  warranty of merchantability or fitness for a particular purpose.  %%  Please email bug reports or suggestions for improvements to:%%      e.a.morelli@larc.nasa.gov%maxloops=100;nloops=0;lstop=0;x=x0;f=eval([fname,'(x,c)']);xhist=zeros(length(x0),maxloops);while nloops<maxloops & lstop==0,  nloops=nloops + 1;  xhist(:,nloops)=x;  xp=x;  fp=f;%%  Follow the gradient.%  lhs=-f;  dfdp=grad(fname,x,c,del,ifd);  dx=dfdp\lhs;  x=x + dx;  f=eval([fname,'(x,c)']);%%  Check for convergence.%  lstop=cnvrg(f,x,fp,xp,tol);endif lstop==1  fprintf('\n\n CONVERGENCE CRITERIA SATISFIED \n\n');else  fprintf('\n\n EXIT ON MAXIMUM ITERATION COUNT, nloops = %4.0f \n\n',nloops);endxhist=xhist(:,[1:nloops]);return