function [cx,cy,cz,cl,cm,cn] = f16_aero(vt,alpha,beta,p,q,r,el,ail,rdr,xcg)%%  function [cx,cy,cz,cl,cm,cn] = f16_aero(vt,alpha,beta,p,q,r,el,ail,rdr,xcg)%%  Usage: [cx,cy,cz,cl,cm,cn] = f16_aero(vt,alpha,beta,p,q,r,el,ail,rdr,xcg);%%  Description:%%    Computes non-dimensional aerodynamic force and moment %    coefficients for the F-16 nonlinear simulation.%%%  Input:%    %     vt  = airspeed, ft/sec.%   alpha = angle of attack, deg.%    beta = sideslip angle, deg.%     p   = roll rate, rad/sec.%     q   = pitch rate, rad/sec.%     r   = yaw rate, rad/sec.%    el   = elevator deflection, deg.%    ail  = aileron deflection, deg.%    rdr  = rudder deflection, deg.%    xcg  = longitudinal c.g. location in fraction of the m.a.c.%%  output:%%    cx = body axis x force coefficient.%    cy = body axis y force coefficient.%    cz = body axis z force coefficient.%    cl = rolling moment coefficient.%    cm = pitching moment coefficient.%    cn = yawing moment coefficient.%%%    Calls:%      cxo.m, czo.m%      cmo.m, clo.m, cno.m%      dlda.m, dldr.m%      dnda.m, dndr.m%      dampder.m%      %    Author:  Eugene A. Morelli%%    History:  %     05 June 1995 - Created and debugged, EAM.%%%  Copyright (C) 2000  Eugene A. Morelli%%%  This program carries no warranty, not even the implied %  warranty of merchantability or fitness for a particular purpose.  %%  Please email bug reports or suggestions for improvements to:%%      e.a.morelli@larc.nasa.gov%global CXO CZO CMO CLO CNO DDERglobal DLDA DLDR DNDA DNDRrtd=180/pi;xcgr=0.35;cbar=11.32;bspan=30.;del=el/25.0;dail=ail/20.0;drdr=rdr/30.0;%%  Aerodynamic forces.%cxt=cxo(alpha,el);cy=-0.02*beta+0.021*dail+0.086*drdr;czt=czo(alpha);cz=czt*(1.-(beta/rtd)^2)-0.19*del;%%  Aerodynamic moments.%clt=clo(alpha,beta);dclda=dlda(alpha,beta);dcldr=dldr(alpha,beta);cl=clt + dclda*dail + dcldr*drdr;cmt=cmo(alpha,el);cnt=cno(alpha,beta);dcnda=dnda(alpha,beta);dcndr=dndr(alpha,beta);cn=cnt + dcnda*dail + dcndr*drdr;%%  Add damping derivative contributions %  and cg position terms.  %tvt=2*vt;b2v=bspan/tvt;cq2v=cbar*q/tvt;d=dampder(alpha);cx=cxt + cq2v*d(1);cy=cy + b2v*(d(3)*p + d(2)*r);cz=cz + cq2v*d(4);cl=cl + b2v*(d(6)*p + d(5)*r);cm=cmt + cq2v*d(7) + cz*(xcgr-xcg);cn=cn + b2v*(d(9)*p + d(8)*r)...   - cy*(xcgr-xcg)*cbar/bspan;return