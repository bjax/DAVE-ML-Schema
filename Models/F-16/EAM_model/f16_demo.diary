>>ls.                   dldr.m              grad.m              ..                  dnda.m              ic_ftrm.m           F16.zip             dndr.m              lnze.m              ab2.m               f16.m               mksqw.m             atm.m               f16_aero.m          pdot.m              clo.m               f16_aero_setup.m    rk2.m               cmo.m               f16_demo.diary      rk4.m               cno.m               f16_deq.m           rtau.m              cnvrg.m             f16_engine.m        solve.m             cxo.m               f16_engine_setup.m  tgear.m             czo.m               f16_massprop.m      dampder.m           f16_trm.m           dlda.m              gen_f16_model.m     >>gen_f16_model CONVERGENCE CRITERIA SATISFIED >>x0x0 =  502.0000    0.0394    0.0000   -0.0000    0.0394         0         0         0         0         0         0         0    9.6447>>u0u0 =    0.1485   -1.9309   -0.0000    0.0000>>AA =   -0.0202    7.8584   -0.6509  -32.1740    0.4023   -0.0003   -1.0186    0.9049   -0.0000   -0.0000         0   -2.4977   -1.3859         0         0         0         0    1.0000         0         0         0         0         0         0   -1.0000>>BB =         0    0.1703         0   -0.0021         0   -0.1824         0         0   64.9400         0>>damp(A)                                                                 Eigenvalue            Damping     Freq. (rad/s)                                                            -8.73e-003 + 7.40e-002i     1.17e-001      7.45e-002     -8.73e-003 - 7.40e-002i     1.17e-001      7.45e-002     -1.00e+000                  1.00e+000      1.00e+000     -1.20e+000 + 1.49e+000i     6.28e-001      1.92e+000     -1.20e+000 - 1.49e+000i     6.28e-001      1.92e+000                                                             >>cc =   -0.7701    0.0275    0.0001    0.0000    0.9604    0.0176    0.0000   -0.7336    0.0000  637.1604    0.3000>>help mksqw    function [y,t] = mksqw(amp,tpulse,npulse,tdelay,dt,tmax)    Usage: [y,t] = mksqw(amp,tpulse,npulse,tdelay,dt,tmax);    Description:      Creates an alternating square wave input vector of length     tmax, with single pulse time tpulse, pulse amplitudes amp, and      individual integer pulse widths given by the elements of npulse.      Input:         amp = input amplitudes for each pulse.     tpulse = time for a single pulse, sec.     npulse = vector of integer pulse widths, e.g., npulse = [3 2 1 1].       tdelay = time delay before the square wave input starts, sec.         dt = sampling time, sec.       tmax = time length for the input, sec.    Output:         y = alternating square wave input vector.          t = time vector, sec.  >>[usw,t]=mksqw(1,1,[1 1],1,.025,10);>>plot(t,usw)>>npts=length(t)npts =   401>>AA =   -0.0202    7.8584   -0.6509  -32.1740    0.4023   -0.0003   -1.0186    0.9049   -0.0000   -0.0000         0   -2.4977   -1.3859         0         0         0         0    1.0000         0         0         0         0         0         0   -1.0000>>BB =         0    0.1703         0   -0.0021         0   -0.1824         0         0   64.9400         0>>x0lin=zeros(5,1)x0lin =     0     0     0     0     0>>ulin=zeros(401,2);>>ulin(:,2)=usw;>>plot(t,ulin)>>ylin=lsim(A,B,C,D,ulin,t,x0lin);>>plot(t,ylin(:,1)),ylabel('Airspeed (fps)'),xlabel('Time (sec)')>>plot(t,ylin(:,2)*180/pi),ylabel('Alpha (deg)'),xlabel('Time (sec)')>>plot(t,ylin(:,3)*180/pi),ylabel('Pitch Rate (dps)'),xlabel('Time (sec)')>>plot(t,ylin(:,4)*180/pi),ylabel('Pitch Angle (deg)'),xlabel('Time (sec)')>>plot(t,ylin(:,5)),ylabel('Power'),xlabel('Time (sec)')>>plot(t,ulin(:,1)),ylabel('Throttle '),xlabel('Time (sec)')>>plot(t,ulin(:,2)),ylabel('Elevator (deg) '),xlabel('Time (sec)')>>fprintf('\n\n End of linear analysis \n\n') End of linear analysis >>u0u0 =    0.1485   -1.9309   -0.0000    0.0000>>u=ones(401,1)*u0';>>plot(t,u)>>fprintf('\n\n Input for nonlinear sim includes trim values \n\n') Input for nonlinear sim includes trim values >>u(:,2)=u(:,2)+usw;>>plot(t,u)>>help f16    function [y,x] = f16(u,t,x0,c)    Usage: [y,x] = f16(u,t,x0,c);     Description:      Computes the state and output vector time histories for the      F-16 nonlinear simulation based on NASA TP-1538, December 1979.    Input:          u = input vector = [ thtl  (0 <= thtl <= 1.0)                           el   (deg)                           ail  (deg)                           rdr  (deg) ];     t = time vector.     x0 = state vector initial condition.     c = vector of constants:  c(1) through c(9) = inertia constants.                               c(10) = aircraft mass, slugs.                               c(11) = xcg, longitudinal c.g. location,                                       distance normalized by the m.a.c.    Output:       y = output vector time history = x.      x = state vector = [   vt  (ft/sec)                           alpha (rad)                            beta (rad)                             phi (rad)                             the (rad)                             psi (rad)                              p  (rad/sec)                              q  (rad/sec)                              r  (rad/sec)                             xe  (ft)                             ye  (ft)                              h  (ft)                               pow (percent, 0 <= pow <= 100) ]; >>[y,x]=f16(u,t,x0,c);>>plot(t,y(:,1)),xlabel('Time (sec)'),ylabel('Airspeed (fps)'),grid on,>>plot(t,y(:,2)*180/pi),xlabel('Time (sec)'),ylabel('Alpha (deg)'),grid on,>>plot(t,y(:,8)*180/pi),xlabel('Time (sec)'),ylabel('Pitch Rate (dps)'),grid on,>>plot(t,y(:,5)*180/pi),xlabel('Time (sec)'),ylabel('Pitch Angle (deg)'),grid on,>>plot(t,y(:,13)),xlabel('Time (sec)'),ylabel('Power'),grid on,>>plot(t,u(:,1)),xlabel('Time (sec)'),ylabel('Throttle'),grid on,>>plot(t,u(:,2)),xlabel('Time (sec)'),ylabel('Elevator (deg)'),grid on,>>plot(t,y(:,2)*180/pi,t,ylin(:,2)*180/pi),xlabel('Time (sec)'),ylabel('Alpha (deg)')>>grid on,legend('Nonlinear','Linear'),title('F-16 Elevator Doublet Simulation')>>plot(t,(y(:,2)-y(1,2))*180/pi,t,ylin(:,2)*180/pi),xlabel('Time (sec)'),ylabel('Alpha (deg)')>>grid on,legend('Nonlinear','Linear'),title('F-16 Elevator Doublet Simulation')>>diary off