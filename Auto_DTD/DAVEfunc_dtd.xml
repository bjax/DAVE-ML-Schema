<?xml version ="1.0" encoding="UTF-8"?>
<!-- An attempt 030708 to encode the DAVEfunc.dtd as an XML file, which 
     could be used to both generate the .dtd as well as reference 
     documentation -->

<!-- As of 20031007, this document relies on the auto_dtd_schema.rnc 
     Compact RELAX NG schema for its interpretation. -->

<?oxygen RNGSchema="auto_dtd_schema.rnc" type="compact"?>
<dtd>

  <genlcomment>
                   Dynamic Aerospace Vehicle Exchange DTD            
                        Function Data Representation                   
                                                                
                              Version: 2.0.1
                               31 March 2011                                       
                                                                
    This DTD module is identified by these PUBLIC and SYSTEM       
    identifiers:                                                   
                                                                
    PUBLIC "-//AIAA//DTD for Flight Dynamic Models - Functions 2.0//EN" 
    SYSTEM "http://daveml.org/DTDs/2p0/DAVEfunc.dtd"
                                                                
    Developed by:

      American Institute of Aeronautics and Astronautics (AIAA)
      Modeling &amp; Simulation Technical Committee
      Simulation Modeling Standards Subcommittee

    Contact information:

      E. Bruce Jackson &lt;mailto:bruce.jackson@nasa.gov&gt;
      Bruce L. Hildreth &lt;mailto:bhildreth@jfti.com&gt;                         
      Persistent DAVE-ML contact &lt;mailto:info@daveml.org&gt;
      &lt;http://daveml.org&gt;

    Purpose: 

      Proposed standard for exchanging dynamic models of aerospace
      vehicles, including aero, engine, gear, inertia, and control
      models.
                                                                
      This preliminary version defines static models typically
      associated with aerodynamic subsystem models, but can be used to
      describe any non-linear multi-dimensional function.
                                                                
    Status:                                                         
      Publicly released as an element of the ANSI/AIAA-S-119-2011 standard.

  </genlcomment>

  <genlcomment>

    Acknowledgments:                                                

    The editors would like to acknowledge the contributions,
    encouragement and helpful suggestions from Dennis Linse
    (originally SAIC, now Vuelo Software Analysis), Jon Berndt (Jacobs
    Sverdrup), Brent York (Indra), Bill Cleveland (NASA Ames), Geoff
    Brian (Australia's DSTO), J. Dana McMinn (NASA Langley), Peter
    Grant (UTIAS), Giovanni A. Cignoni (University of Pisa), Daniel
    M. Newman (formerly Ball Aerospace, now Quantitative Aeronautics),
    Hilary Keating (Fortburn Pty. Ltd.), Riley Rainey (SDS
    International), Jeremy Furtek (Delphi Research) and Randy
    Brumbaugh (Indigo Innovations).

  </genlcomment>
  
  <genlcomment>
    Include the MathML2 DTD for any math markup
  </genlcomment>
  
  <entityDef enID="mathml2"  public="-//W3C//DTD MathML 2.0//EN" system="http://www.w3.org/Math/DTD/mathml2/mathml2.dtd" name="mathml2"></entityDef>

  <elLevel>0</elLevel>

  <el>
    <name>DAVEfunc</name>
    <purpose>Root level element</purpose>
    <descrip>
      Root element is DAVEfunc, composed of a file header element
      followed by one or more variable definitions and zero or more
      breakpoint definitions, gridded or ungridded table definitions,
      and function elements.
    </descrip>
    <sequence>
      <elRef elID="fileHeader" num="one"/>
      <elRef elID="variableDef" num="oneplus"/>
      <elRef elID="breakpointDef" num="zeroplus"/>
      <elRef elID="griddedTableDef" num="zeroplus"/>
      <elRef elID="ungriddedTableDef" num="zeroplus"/>
      <elRef elID="function" num="zeroplus"/>
      <elRef elID="checkData" num="binary"/>
    </sequence>
    <attr name="xmlns" type="cdata" default="fixed" value="http://daveml.org/2010/DAVEML">
      <attdef>
	This attribute specifies that the default namespace for un-prefixed elements is this DTD.
      </attdef>
    </attr>
  </el>

  <elLevel>1</elLevel>

  <el>
    <name>fileHeader</name>
    <purpose>States source and purpose of file</purpose>
    <descrip>
      The header element requires at least one author and a creation date;
      optional content includes version indicator, description,
      references, and modification records.
    </descrip>
    <sequence>
      <elRef elID="author" num="oneplus"/>
      <choice>
        <elRef elID="creationDate" num="one"/>
        <elRef elID="fileCreationDate" num="one"/>
      </choice>
      <elRef elID="fileVersion" num="binary"/>
      <elRef elID="description" num="binary"/>
      <elRef elID="reference" num="zeroplus"/>
      <elRef elID="modificationRecord" num="zeroplus"/>
      <elRef elID="provenance" num="zeroplus"/>
    </sequence>
    <attr name="name" type="cdata" default="implied">
      <attdef>The name of the file.</attdef>
    </attr>
  </el>

  <el>
    <name>variableDef</name>
    <purpose>Defines signals used in DAVE-ML model</purpose>
    <descrip>
      variableDef elements provide wiring information (i.e., they
      identify the input and output signals used by these function
      blocks). They also provide MathML content markup to indicate any
      calculation required to arrive at the value of the variable,
      using other variables as inputs.  The variable definition can
      include statistical information regarding the uncertainty of the
      values which it might take on, when measured after any
      calculation is performed. Information about the reason for
      inclusion or change to this element can be included in an
      optional provenance sub-element.

      If either or both min or max attributes are specified, the
      implementer must limit the final value of the variable to remain
      within the specified bound(s). These attributes imply a one- or
      two-sided limiter function downstream of any specified
      calculation, input signal, or initial value.

      Min and max attributes may only be fixed numeric values. To
      provide variable limits, the modeler should employ the piecewise
      MathML element in a calculation subelement.
    
    </descrip>
    <sequence>
      <elRef elID="description" num="binary"/>
      <choice num="binary">
        <elRef elID="provenance"/>
        <elRef elID="provenanceRef"/>
      </choice>
      <elRef elID="calculation" num="binary"/>
      <choice num="binary">
        <elRef elID="isInput"/>
        <elRef elID="isControl"/>
        <elRef elID="isDisturbance"/>
      </choice>
      <elRef elID="isState" num="binary"/>
      <elRef elID="isStateDeriv" num="binary"/>
      <elRef elID="isOutput" num="binary"/>
      <elRef elID="isStdAIAA" num="binary"/>
      <elRef elID="uncertainty" num="binary"/>
    </sequence>

    <attr name="name" type="cdata" default="required">
      <attdef>The name of the signal being defined.</attdef>
    </attr>
    <attr name="varID" type="id" default="required">
      <attdef>An internal identifier for the signal.</attdef>
    </attr>
    <attr name="units" type="cdata" default="required">
      <attdef>The units of the signal.</attdef>
    </attr>
    <attr name="axisSystem" type="cdata" default="implied">
      <attdef>The axis in which the signal is measured.</attdef>
    </attr>
    <attr name="sign" type="cdata" default="implied">
      <attdef>The sign convention for the signal, if any.</attdef>
    </attr>
    <attr name="alias" type="cdata" default="implied">
      <attdef>Possible alias name (facility specific) for the signal.</attdef>
    </attr>
    <attr name="symbol" type="cdata" default="implied">
      <attdef>UNICODE symbol for the signal.</attdef>
    </attr>
    <attr name="initialValue" type="cdata" default="implied">
      <attdef>An initial and possibly constant numeric value for the signal.</attdef>
    </attr>
    <attr name="minValue" type="cdata" default="implied">
      <attdef>A minimum value the variable shall be limited to remain
      greater than or equal to.</attdef>
    </attr>
    <attr name="maxValue" type="cdata" default="implied">
      <attdef>A maximum value the variable shall be limited to remain
      less than or equal to.</attdef>
    </attr>

  </el>

  <el>
    <name>variableRef</name>
    <purpose>Reference to a variable definition</purpose>
    <empty/>
    <attr name="varID" type="idref" default="required">
      <attdef>The internal identifier of a previous variable definition.</attdef>
    </attr>
  </el>

  <el>
    <name>breakpointDef</name>
    <purpose>Defines breakpoint sets to be used in model</purpose>
    <descrip>
      A breakpointDef lists gridded table breakpoints.
      Since these are separate from function data they may be reused.
    </descrip>
    <sequence>
      <elRef elID="description" num="binary"/>
      <elRef elID="bpVals" num="one"/>
    </sequence>
    <attr name="name" type="cdata" default="implied">
      <attdef>The name of the breakpoint set.</attdef>
    </attr>
    <attr name="bpID" type="id" default="required">
      <attdef>The internal identifier for the breakpoint set.</attdef>
    </attr>
    <attr name="units" type="cdata" default="implied">
      <attdef>The units of measure for the breakpoint set.</attdef>
    </attr>
  </el>

  <el>
    <name>bpVals</name>
    <purpose>String of white space- or comma-separated values of breakpoints</purpose>
    <descrip>
      bpVals is a set of breakpoints (i.e., a set of independent
      variable values associated with one dimension of a gridded table
      of data). An example would be the Mach or angle-of-attack values
      that define the coordinates of each data point in a
      2D coefficient value table.
    </descrip>
    <data/>
  </el>

  <el>
    <name>griddedTableDef</name>
    <purpose>Defines an orthogonally gridded table of data points</purpose>
    <descrip>
      A griddedTableDef contains points arranged in an orthogonal (but
      multi-dimensional) array, where the independent variables are
      defined by separate breakpoint vectors.  This table definition
      may be specified separately from the actual function
      declaration.
    </descrip>
    <sequence>
      <elRef elID="description" num="binary"/>
      <choice num="binary">
	<elRef elID="provenance"/>
        <elRef elID="provenanceRef"/>
      </choice>
      <elRef elID="breakpointRefs" num="one"/>
      <elRef elID="uncertainty" num="binary"/>
      <elRef elID="dataTable" num="one"/>
    </sequence>
    <attr name="name" type="cdata" default="implied">
      <attdef>The name of the gridded table.</attdef>
    </attr>
    <attr name="gtID" type="id" default="required"> 
      <attdef>
	An internal identifier for the table. As of DAVE-ML 2.0, it is
	required for all tables (previously was required only if the
	table was to be be reused by another function or was defined
	outside of a function.
      </attdef>
    </attr>
    <attr name="units" type="cdata" default="implied">
      <attdef>Units of measure for the table values.</attdef>
    </attr>
  </el>

  <el>
    <name>ungriddedTableDef</name>
    <purpose>Defines a table of data, each with independent coordinates</purpose>
    <descrip>
      An ungriddedTableDef contains points that are not in an
      orthogonal grid pattern; thus, the independent variable
      coordinates are specified for each dependent variable value.
      This table definition may be specified separately from the
      actual function declaration.
    </descrip>
    <sequence>
      <elRef elID="description" num="binary"/>
      <choice num="binary">
	<elRef elID="provenance"/>
        <elRef elID="provenanceRef"/>
      </choice>
      <elRef elID="uncertainty" num="binary"/>
      <elRef elID="dataPoint" num="oneplus"/>
    </sequence>
    <attr name="name" type="cdata" default="implied">
      <attdef>The name of the ungridded table.</attdef>
    </attr>
    <attr name="utID" type="id" default="required"> 
      <attdef>
	An internal identifier for the table. As of DAVE-ML 2.0, it is
	required for all tables (previously it was required only if
	the table was to be be reused by another function or was
	defined outside of a function.
      </attdef>
    </attr>
    <attr name="units" type="cdata" default="implied">
      <attdef>The units of measure for the table values.</attdef>
    </attr>
  </el>

  <el>
    <name>function</name>
    <purpose>Defines a function by combining independent variables, breakpoints, and tables</purpose>
    <descrip>
      Each function has optional description, optional provenance, and
      either a simple input/output table values or references to more
      complete (possible multiple) input, output, and function data
      elements.
    </descrip>
    <sequence>
      <elRef elID="description" num="binary"/>
      <choice num="binary">
        <elRef elID="provenance"/>
        <elRef elID="provenanceRef"/>
      </choice>
      <choice>
        <sequence>
          <elRef elID="independentVarPts" num="oneplus"/>
          <elRef elID="dependentVarPts" num="one"/>
        </sequence>
        <sequence>
          <elRef elID="independentVarRef" num="oneplus"/>
          <elRef elID="dependentVarRef" num="one"/>
          <elRef elID="functionDefn" num="one"/>
        </sequence>
      </choice>
    </sequence>
    <attr name="name" type="cdata" default="required">
      <attdef>The name of this function.</attdef>
    </attr>
  </el>

  <el>
    <name>checkData</name>
    <purpose>Gives verification data for encoded model</purpose>
    <descrip>
      This top-level element is the place-holder for verification data
      of various forms for the encoded model. It will include static
      check cases, trim shots, and dynamic check case information.
      The provenance sub-element is now deprecated and has been moved
      to individual staticShots; it is allowed here for backwards
      compatibility. 
    </descrip>
    <sequence>
      <choice num="binary">
        <elRef elID="provenance"/>
        <elRef elID="provenanceRef"/>
      </choice>
      <elRef elID="staticShot" num="oneplus"/>
    </sequence>
  </el>

  <elLevel>2</elLevel>

  <el>
    <name>author</name>
    <purpose>Gives name and contact information for originating party of the associated data</purpose>
    <descrip>
      author includes alternate means of identifying author using XNS
      or normal e-mail/address. The address sub-element is to be
      replaced with the more complete contactInfo sub-element.
    </descrip>
    <choice>
      <elRef elID="address" num="zeroplus"/>
      <elRef elID="contactInfo" num="zeroplus"/>
    </choice>
    <attr name="name" type="cdata" default="required">
      <attdef>The name of the author or last modifier of the associated element's data.</attdef>
    </attr>
    <attr name="org" type="cdata" default="required">
      <attdef>The author's organization.</attdef>
    </attr>
    <attr name="xns" type="cdata" default="implied">
      <attdef>The eXtensible Name Service identifier for the author.</attdef>
      <deprecated/>
    </attr>
    <attr name="email" type="cdata" default="implied">
      <attdef>The e-mail address for the primary author.</attdef>
      <deprecated/>
    </attr>
    <future>
      Both the xns and email attributes are deprecated and will be
      removed. XNS was a proposed Internet technology (eXtensible Name
      Service) to reduce spam that didn't catch on. It is replaced
      with the 'iname' sub-element as a single means to identify an
      individual or corporation in lieu of typical (and quickly dated)
      e-mail, phone, or address information. The address element itself
      is deprecated and should be replaced with the contactInfo
      element
    </future>
  </el>

  <el>
    <name>creationDate</name>
    <purpose>Gives date of creation of entity</purpose>
    <descrip>
      creationDate is simply a string with a date in it.  We
      follow ISO 8601 and use dates like "2004-01-02" to refer to
      January 2, 2004. 
    </descrip>
    <empty/>
    <attr name="date" type="cdata" default="required">
      <attdef>The date of creation of the entity, in ISO 8601 (YYYY-MM-DD) format.</attdef>
    </attr>
  </el>

  <el>
    <name>fileCreationDate</name>
    <purpose>Gives date of creation of entity [Deprecated]</purpose>
    <descrip>
      fileCreationDate is simply a string with a date in it.  We
      follow ISO 8601 and use dates like "2004-01-02" to refer to
      January 2, 2004. Its use is now deprecated in favor of the
      simpler creationDate.
    </descrip>
    <empty/>
    <attr name="date" type="cdata" default="required">
      <attdef>The date of the file, in ISO 8601 (YYYY-MM-DD) format.</attdef>
    </attr>
    <future>
      The fileCreationDate and functionCreationDate have been replaced
      with a new creationDate multipurpose element.
    </future>
    <deprecated/>
  </el>

  <el>
    <name>fileVersion</name>
    <purpose>Indicates the version of the document</purpose>
    <descrip>
      This is a string describing, in some arbitrary text, the version
      identifier for this function description.
    </descrip>
    <data/>
  </el>

  <el>
    <name>description</name>
    <purpose>Verbal description of an entity</purpose>
    <descrip>
      The description element is a textual description of an
      entity. The full UNICODE character set is supported by XML but
      may not be available in all processing applications.
    </descrip>
    <data/>
  </el>

  <el>
    <name>isOutput</name>
    <purpose>Flag to identify non-obvious output signals from model</purpose>
    <descrip>
      The presence of the isOutput element indicates that this
      variable should be forced to be an output, even if it is used
      internally as an input elsewhere. Otherwise, the processing
      program may assume a signal defined with a calculation and used
      subsequently in the model is only an internal signal.
    </descrip>
    <empty/>
  </el>

  <el>
    <name>isState</name>
    <purpose>Flag to identify a state variable within a dynamic model</purpose>
    <descrip>
      The presence of an isState element indicates that this variable
      is one of possibly multiple state variables in a dynamic model;
      this tells the processing entity that this is the output of an
      integrator (for continuous models) or a discretely updated state
      (for discrete models).
    </descrip>
    <empty/>
  </el>

  <el>
    <name>isStateDeriv</name>
    <purpose>Flag to identify a state derivative within a dynamic model</purpose>
    <descrip>
      The presence of an isStateDeriv element indicates that this
      variable is one of possibly several state derivative variables
      in a dynamic model; this tells the processing entity that this
      is the output of an integrator (for continuous models only).
    </descrip>
    <empty/>
  </el>

  <el>
    <name>isInput</name>
    <purpose>Flag to identify a model input variable</purpose>
    <descrip>
      The presence of an isInput element indicates that this variable
      is an input signal to the model.
    </descrip>
    <empty/>
  </el>

  <el>
    <name>isControl</name>
    <purpose>Flag to identify a model control parameter</purpose>
    <descrip>
      The presence of an isControl element indicates that this signal
      is a simulation control parameter used to vary the operation of
      the model, e.g. the time step size. Such parameters should be
      ignored when performing linear model extraction (for example)
      and should not significantly modify the dynamic behavior of the
      model.
    </descrip>
    <empty/>
  </el>

  <el>
    <name>isDisturbance</name>
    <purpose>Flag to identify a model disturbance input</purpose>
    <descrip>
      The presence of an isDisturbance element indicates that this
      signal is an external disturbance input to the model and can be
      ignored when performing linear model extraction (for
      example). Such parameters should not significantly modify the
      nominal dynamic behavior of the model.
    </descrip>
    <empty/>
  </el>

  <el>
    <name>isStdAIAA</name>
    <purpose>Flag to identify standard AIAA simulation variable</purpose>
    <descrip>
      The presence of an isStdAIAA element indicates that this
      variable is one of the standard AIAA variable names
      which should be recognizable exterior to this module
      (e.g. AngleOfAttack_deg). This flag should assist importing tools in
      determining when an input or output should match a
      facility-provided signal name without requiring further
      information.
    </descrip>
    <empty/>
  </el>

  <el>
    <name>calculation</name>
    <purpose>Used to delimit a MathML v2 calculation</purpose>
    <descrip>
      The calculation element wraps around MathML 2 content markup
      describing how the signal is calculated. The calculation may
      include both constants and variables; other variables are
      included by using their varID string in a MathML content
      identifier (ci) element. The calculation element must have one
      and only one subelement, and the subelement must be a 'math'
      element containing 'content' markup.
    </descrip>
    <elRef elID="math" num="one"/>
  </el>

  <el>
    <name>math</name>
    <purpose>Denotes a MathML expression</purpose>
    <descrip>
      The math element denotes MathML 2 content markup and should
      include the attribute 'xmlns="http://www.w3.org/1998/Math/MathML"'
    </descrip>
    <attr name="xmlns" type="cdata" default="fixed" value="http://www.w3.org/1999/Math/MathML">
      <attdef>
	The value of this attribute must be
	"http://www.w3.org/1998/Math/MathML". If omitted, it should be
	provided by the parser since it is specified in the DTD.
      </attdef>
    </attr>
    <nodef/>
  </el>

  <el>
    <name>reference</name>
    <purpose>Describes an external document</purpose>
    <descrip>
      This element gives identifying (citation) information to an
      external, possibly on-line, reference document, including a
      user-specified author, title, classification, accession number,
      date and URL.
    </descrip>
    <elRef elID="description" num="binary"/>
    <attr name="xmlns:xlink" type="cdata" default="fixed" value="http://www.w3.org/1999/xlink">
      <attdef>The value of this attribute must be
      "http://www.w3.org/1999/xlink". If omitted, it should be
      provided by the parser since it is specified in the DTD.</attdef>
    </attr>
    <attr name="xlink:type" type="simple" default="fixed" value="simple">
      <attdef>The value of this attribute must be "simple". If
      omitted, it should be provided by the parser since it is
      specified in the DTD.</attdef>
    </attr>
    <attr name="refID" type="id" default="required">
      <attdef>An internal identifier for this reference definition.</attdef>
    </attr>
    <attr name="author" type="cdata" default="required">
      <attdef>The name of the author of the reference.</attdef>
    </attr>
    <attr name="title" type="cdata" default="required">
      <attdef>The title of the referenced document.</attdef>
    </attr>
    <attr name="classification" type="cdata" default="implied">
      <attdef>The security classification of the document.</attdef>
    </attr>
    <attr name="accession" type="cdata" default="implied">
      <attdef>The accession number (ISBN or organization report number) of the document.</attdef>
    </attr>
    <attr name="date" type="cdata" default="required">
      <attdef>The date of the document, in ISO 8601 (YYYY-MM-DD) format.</attdef>
    </attr>
    <attr name="xlink:href" type="cdata" default="implied">
      <attdef>A URL to an on-line copy of the referenced document.</attdef>
    </attr>
  </el>

  <el>
    <name>modificationRecord</name> 

    <purpose>To associate a reference single letter with a modification
    event</purpose>

    <descrip>
      A modificationRecord associates a single letter (such as
      modification "A") with modification author(s), address, and any
      optional external reference documents, in keeping with the AIAA
      draft standard.
    </descrip>

    <sequence>
      <elRef elID="author" num="oneplus"/>
      <elRef elID="description" num="binary"/>
      <elRef elID="extraDocRef" num="zeroplus"/>
    </sequence>
    <attr name="modID" type="id" default="required">
      <attdef>
	A single letter used to identify all modified data associated
	with this modification record.
      </attdef>
    </attr>
    <attr name="date" type="cdata" default="required">
      <attdef>The date of the modification, in ISO 8601 (YYYY-MM-DD) format.</attdef>
    </attr>
    <attr name="refID" type="idref" default="implied">
      <attdef>A reference to a predefined document that describes the
      reason for this modification.</attdef>
    </attr>
  </el>

  <el>
    <name>extraDocRef</name>
    <purpose>Allows multiple documents to be associated with a single modification event</purpose>
    <descrip>
      A single modification event may have more than one documented
      reference. This element can be used in place of the refID
      attribute in a modificationRecord to record more than one
      refIDs, pointing to the referenced document.
    </descrip>
    <empty/>
    <attr name="refID" type="idref" default="required">
      <attdef>The internal identifier of a reference definition element.</attdef>
    </attr>
  </el>

  <el>
    <name>provenance</name>
    <purpose>Describes origin or history of the associated information</purpose>
    <descrip>
      The provenance element describes the history or source of the
      model data and includes author, date, and zero or more
      references to documents and modification records.
    </descrip>
    <sequence>
      <elRef elID="author" num="oneplus"/>
      <choice>
        <elRef elID="creationDate" num="one"/>
        <elRef elID="functionCreationDate" num="one"/>
      </choice>
      <elRef elID="documentRef" num="zeroplus"/>
      <elRef elID="modificationRef" num="zeroplus"/>
      <elRef elID="description" num="binary"/>
    </sequence>
    <attr name="provID" type="id" default="implied">
      <attdef>
	This attribute allows the provenance information defined here
	to be cited elsewhere.
      </attdef>
    </attr>
  </el>

  <el>
    <name>provenanceRef</name>
    <purpose>References a previously defined data provenance description</purpose>
    <descrip> 
      When the provenance of a set of several data is identical, the
      first provenance element should be given a provID and referenced by
      later provenanceRef elements.
    </descrip>
    <empty/>
    <attr name="provID" type="idref" default="required">
      <attdef>The internal identifier for a previously defined provenance.</attdef>
    </attr>
  </el>

  <el>
    <name>independentVarPts</name>
    <purpose>Simple definition of independent breakpoints</purpose>
    <descrip>
      An independentVarPts element is a simple white space- or
      comma-separated list of breakpoints and contains a mandatory
      varID identifier as well as optional name, units, and sign
      convention attributes.

      An optional extrapolate attribute describes how to extrapolate
      the output value when the input value exceeds specified values
      (default is 'neither,' meaning the value of the table is held
      constant at the nearest defined value). An optional interpolate
      attribute indicates how to perform the interpolation within the
      table (supporting discrete, linear, cubic or quadratic
      splines). There are three different discrete options: 'discrete'
      means nearest-neighbor, with an exact mid-point value being
      rounded in the positive direction; 'ceiling' means the function
      takes on the value associated with the next (numerically) higher
      independent breakpoint as soon as the original value is exceeded;
      and 'floor' means the function holds the value associated with
      each breakpoint until the next (numerically) higher breakpoint
      value is reached by the independent argument. The default
      interpolation attribute value is 'linear.'

      This element is used for simple functions that do not share
      breakpoint or table values with other functions.
    </descrip>
    <data/>
    <attr name="varID" type="idref" default="required">
      <attdef>The internal identifier of the input signal
      corresponding to this independent variable.</attdef>
    </attr>
    <attr name="name" type="cdata" default="implied">
      <attdef>The name of the function's independent variable input signal.</attdef>
    </attr>
    <attr name="units" type="cdata" default="implied">
      <attdef>The units of measure for the independent variable.</attdef>
    </attr>
    <attr name="sign" type="cdata" default="implied">
      <attdef>The sign convention for the independent variable.</attdef>
    </attr>
    <attr name="extrapolate" type="enum" default="implied">
      <attdef>Extrapolation flags for IV out-of-bounds (default is neither)</attdef>
      <enumVal>neither</enumVal>
      <enumVal>min</enumVal>
      <enumVal>max</enumVal>
      <enumVal>both</enumVal>
    </attr>
    <attr name="interpolate" type="enum" default="implied">
      <attdef>Interpolation flags for independent variable (default is linear)</attdef>
      <enumVal>discrete</enumVal>
      <enumVal>floor</enumVal>
      <enumVal>ceiling</enumVal>
      <enumVal>linear</enumVal>
      <enumVal>quadraticSpline</enumVal>
      <enumVal>cubicSpline</enumVal>
    </attr>
  </el>

  <el>
    <name>dependentVarPts</name>
    <purpose>Defines output breakpoint values</purpose>
    <descrip>
      A dependentVarPts element is a simple comma- or
      white space-delimited list of function values and contains a
      mandatory varID as well as optional name, units, and sign
      convention attributes. Data points are arranged as single
      vector with last-specified breakpoint values changing most
      frequently. Note that the number of dependent values must equal
      the product of the number of independent values for this simple,
      gridded, realization. This element is used for simple functions
      that do not share breakpoint or table values with other
      functions.
    </descrip>
    <data/>
    <attr name="varID" type="idref" default="required">
      <attdef>The internal identifier of the output signal this table should drive.</attdef>
    </attr>
    <attr name="name" type="cdata" default="implied">
      <attdef>The name of the function's dependent variable output signal.</attdef>
    </attr>
    <attr name="units" type="cdata" default="implied">
      <attdef>The units of measure for the dependent variable.</attdef>
    </attr>
    <attr name="sign" type="cdata" default="implied">
      <attdef>The sign convention for the dependent variable.</attdef>
    </attr>
  </el>

  <el>
    <name>independentVarRef</name>
    <purpose>References a predefined signal as an input to a function</purpose>
    <descrip>
      An independentVarRef more fully describes the input mapping of
      the function by pointing to a separate breakpoint definition
      element.

      An optional extrapolate attribute describes how to extrapolate
      the output value when the input value exceeds specified values
      (default is 'neither,' meaning the value of the table is held
      constant at the nearest defined value). An optional interpolate
      attribute indicates how to perform the interpolation within the
      table (supporting discrete, linear, cubic or quadratic
      splines). There are three different discrete options: 'discrete'
      means nearest-neighbor, with an exact mid-point value being
      rounded in the positive direction; 'floor' means the function
      takes on the value associated with the next (numerically) higher
      independent breakpoint as soon as original value is exceeded;
      and 'ceiling' means the function holds the value associated with
      each breakpoint until the next (numerically) higher breakpoint
      value is reached by the independent argument. The default
      interpolation attribute value is 'linear.'

      Note also that the option min and max attributes serve to limit
      the numeric range of the independent (function input) variable;
      these attributes are independent of and serve as additional
      range contraints with respect to any minValue or maxValue
      attribute associated with the independent variable itself.

      This element allows reuse of common breakpoint values for many
      tables but with possible differences in interpolation or
      extrapolation for each use.
    </descrip>
    <empty/>
    <attr name="varID" type="idref" default="required">
      <attdef>The internal identifier for the input signal.</attdef>
    </attr>
    <attr name="min" type="cdata" default="implied">
      <attdef>The allowable lower limit for the input signal.</attdef>
    </attr>
    <attr name="max" type="cdata" default="implied">
      <attdef>The allowable upper limit for the input signal.</attdef>
    </attr>
    <attr name="extrapolate" type="enum" default="implied">
      <attdef>Extrapolation flags for IV out-of-bounds (default is neither)</attdef>
      <enumVal>neither</enumVal>
      <enumVal>min</enumVal>
      <enumVal>max</enumVal>
      <enumVal>both</enumVal>
    </attr>
    <attr name="interpolate" type="enum" default="implied">
      <attdef>Interpolation flags for independent variable (default is linear)</attdef>
      <enumVal>discrete</enumVal>
      <enumVal>floor</enumVal>
      <enumVal>ceiling</enumVal>
      <enumVal>linear</enumVal>
      <enumVal>quadraticSpline</enumVal>
      <enumVal>cubicSpline</enumVal>
    </attr>
  </el>

  <el>
    <name>dependentVarRef</name>
    <purpose>Identifies the signal to be associated with the output of a function</purpose>
    <descrip>
      A dependentVarRef ties the output of a function to a signal name
      defined previously in a variable definition.
    </descrip>
    <empty/>
    <attr name="varID" type="idref" default="required">
      <attdef>The internal identifier for the output signal.</attdef>
    </attr>
  </el>

  <el>
    <name>functionDefn</name>
    <purpose>Defines a function by associating a table with other information</purpose>
    <descrip>
      A functionDefn defines how function is represented in one of two
      possible ways: gridded (implies breakpoints) or ungridded (with
      explicit independent values for each point).
    </descrip>
    <choice>
      <elRef elID="griddedTableRef" num="one"/>
      <elRef elID="griddedTableDef" num="one"/>
      <elRef elID="griddedTable" num="one"/>
      <elRef elID="ungriddedTableRef" num="one"/>
      <elRef elID="ungriddedTableDef" num="one"/>
      <elRef elID="ungriddedTable" num="one"/>
    </choice>
    <attr name="name" type="cdata" default="implied">
      <attdef>The name of this function definition.</attdef>
    </attr>
  </el>

  <elLevel>3</elLevel>

  <el>
    <name>address</name>
    <purpose>Street address or other contact information of an author [Deprecated.]</purpose>
    <data/>
    <future>This element has been subsumed by the contactInfo element below.</future>
    <deprecated/>
  </el>

  <el>
    <name>contactInfo</name>
    <purpose>Provides multiple contact information associated with an author or agency</purpose>
    <descrip>
      Used to provide contact information about an author. Use
      contactInfoType to differentiate what information is being
      conveyed and contactLocation to denote location of the address.
    </descrip>
    <data/>
    <attr name="contactInfoType" type="enum" default="implied">
      <attdef>Indicates type of information being conveyed</attdef>
      <enumVal>address</enumVal>
      <enumVal>phone</enumVal>
      <enumVal>fax</enumVal>
      <enumVal>email</enumVal>
      <enumVal>iname</enumVal>
      <enumVal>web</enumVal>
    </attr>
    <attr name="contactLocation" type="enum" default="implied">
      <attdef>Indicates which location is identified. Default is professional</attdef>
      <enumVal>professional</enumVal>
      <enumVal>personal</enumVal>
      <enumVal>mobile</enumVal>
    </attr>
  </el>

  <el>
    <name>functionCreationDate</name>
    <purpose>
      Date of creation of a function table [Deprecated]
    </purpose>
    <descrip>
      functionCreationDate is simply a string with a date in it.  We
      follow ISO 8601 and use dates like "2004-01-02" to refer to
      January 2, 2004. Its use is now deprecated in favor of the 
      simpler creationDate.
    </descrip>
    <empty/>
    <attr name="date" type="cdata" default="required">
      <attdef>The creation date of the function, in ISO 8601 (YYYY-MM-DD) format.</attdef>
    </attr>
    <future>
      The fileCreationDate and functionCreationDate have been replaced
      with a new creationDate multipurpose element.
    </future>
    <deprecated/>
  </el>

  <el>
    <name>documentRef</name>
    <purpose>Reference to an external document</purpose>
    <empty/>
    <attr name="docID" type="idref" default="implied">
      <attdef>The internal identifier of a reference definition element.</attdef>
      <deprecated/>
    </attr>
    <attr name="refID" type="idref" default="required">
      <attdef>The internal identifier of a reference definition element.</attdef>
    </attr>
    <future>
      The 'docID' attribute is deprecated; it has been renamed 'refID'
      to match its use in the 'reference' element. This attribute
      will be removed in a future version of DAVE-ML.
    </future>
  </el>

  <el>
    <name>modificationRef</name>
    <purpose>Reference to associated modification information</purpose>
    <empty/>
    <attr name="modID" type="idref" default="required">
      <attdef>The internal identifier of a modification definition.</attdef>
    </attr>
  </el>

  <el>
    <name>griddedTableRef</name>
    <purpose>Reference to a gridded table definition</purpose>
    <empty/>
    <attr name="gtID" type="idref" default="required">
      <attdef>The internal identifier of a gridded table definition.</attdef>
    </attr>
  </el>

  <el>
    <name>griddedTable</name>
    <purpose>Definition of a gridded table; associates breakpoint data with table data [Deprecated]</purpose>
    <sequence>
      <elRef elID="breakpointRefs" num="one"/>
      <elRef elID="confidenceBound" num="binary"/>
      <elRef elID="dataTable" num="one"/>
    </sequence>
    <attr name="name" type="cdata" default="implied">
      <attdef>The name of the gridded table being defined.</attdef>
    </attr>
    <future>Deprecated. Use griddedTableDef instead.</future>
    <deprecated/>
  </el>

  <el>
    <name>ungriddedTableRef</name>
    <purpose>Reference to an ungridded table</purpose>
    <empty/>
    <attr name="utID" type="idref" default="required">
      <attdef>The internal identifier of a ungridded table definition.</attdef>
    </attr>
  </el>

  <el>
    <name>ungriddedTable</name>
    <purpose>Definition of an ungridded set of function data [Deprecated]</purpose>
    <sequence>
      <elRef elID="confidenceBound" num="binary"/>
      <elRef elID="dataPoint" num="oneplus"/>
    </sequence>
    <attr name="name" type="cdata" default="implied">
      <attdef>The name of the ungridded table being defined.</attdef>
    </attr>
    <future>Deprecated. Use ungriddedTableDef instead.</future>
    <deprecated/>
  </el>

  <el>
    <name>staticShot</name>
    <purpose>
      Used to check the validity of the model once instantiated by the receiving facility or tool.
    </purpose>
    <descrip>
      Contains a description of the inputs and outputs, and possibly internal values, of a DAVE-ML
      model in a particular instant of time.
    </descrip>
    <sequence>
      <elRef elID="description" num="binary"/>
      <choice num="binary">
        <elRef elID="provenance"/>
        <elRef elID="provenanceRef"/>
      </choice>
      <elRef elID="checkInputs" num="binary"/>
      <elRef elID="internalValues" num="binary"/>
      <elRef elID="checkOutputs" num="one"/>
    </sequence>
    <attr name="name" type="cdata" default="required"/>
    <attr name="refID" type="idref" default="implied">
      <attdef>Points to a reference given in the file header.</attdef>
    </attr>
  </el>

  <elLevel>4</elLevel>

  <el>
    <name>breakpointRefs</name>
    <purpose>A list of breakpoint reference (bpRefs)</purpose>
    <descrip>
      The breakpointRefs elements tie the independent variable names
      for the function to specific breakpoint values defined earlier.
    </descrip>
    <elRef elID="bpRef" num="oneplus"/>
  </el>

  <el>
    <name>confidenceBound</name>
    <purpose>Defines the confidence in a function [Deprecated]</purpose>
    <descrip>
      The confidenceBound element is used to declare the confidence
      interval associated with the data table. This is a place-holder
      and will be removed in a future version of DAVE-ML.
    </descrip>
    <empty/>
    <attr name="value" type="cdata" default="required">
      <attdef>Percent confidence (like 95%) in the function.</attdef>
    </attr>
    <future>Deprecated. Used only in deprecated [un]griddedTable
    elements. Use uncertainty element instead.</future>
    <deprecated/>
  </el>

  <el>
    <name>uncertainty</name>
    <purpose>
      Describes statistical uncertainty bounds and any correlations for
      a parameter or function table.
    </purpose>
    <descrip>
      The uncertainty element is used in function and parameter
      definitions to describe statistical variance in the possible
      value of that function or parameter value. Only Gaussian
      (normal) or uniform distributions of continuous random variable
      distribution functions are supported.
    </descrip>
    <choice>
      <elRef elID="normalPDF" num="one"/>
      <elRef elID="uniformPDF" num="one"/>
    </choice>
    <attr name="effect" type="enum" default="required">
      <attdef>Indicates how uncertainty bounds are interpreted.</attdef>
      <enumVal>additive</enumVal>
      <enumVal>multiplicative</enumVal>
      <enumVal>percentage</enumVal>
      <enumVal>absolute</enumVal>
    </attr>
  </el>

  <el>
    <name>dataTable</name>
    <purpose>Lists the values of a table of function or uncertainty data</purpose>
    <descrip>
      The dataTable element is used by gridded tables where the indep.
      variable values are implied by breakpoint sets. Thus, the data
      embedded between the dataTable element tags is expected to be
      sorted ASCII values of the gridded table, wherein the last
      independent variable listed in the function header varies most
      rapidly.

      The table data point values are specified as comma- or
      white space-separated values in conventional floating-point
      notation (0.93638E-06) in a single long sequence as if the table
      had been unraveled with the last-specified dimension changing
      most rapidly.  Line breaks are to be ignored. Comments may be
      embedded in the table to promote [human] readability, with
      appropriate escaping characters.

      A dataTable element can also be used in an uncertainty element
      to provide duplicate uncertainty bound values.

    </descrip>
    <data/>
  </el>
   
  <el>
    <name>dataPoint</name>
    <purpose>Defines each point of an ungridded table</purpose>
    <descrip>
      The dataPoint element is used by ungridded tables to list the
      values of independent variables that are associated with each
      value of dependent variable. For example:
                                                                 
 &lt;dataPoint&gt;                                                     
   0.1, -4.0, 0.2      &lt;!- Mach, alpha, CL -&gt;                    
 &lt;/dataPoint&gt;                                                    
 &lt;dataPoint&gt;                                                     
   0.1,  0.0, 0.6      &lt;!- Mach, alpha  CL -&gt;                    
 &lt;/dataPoint&gt;                                                    
                                                                 
      Each data point may have associated with it a modification tag
      to document the genesis of that particular point.  No
      requirement on ordering of independent variables is implied.
      Since this is an ungridded table, the interpreting application is
      required to handle what may be unsorted data.
    </descrip>
    <data/>
    <attr name="modID" type="idref" default="implied">
      <attdef>The internal identifier for a modification record.</attdef>
    </attr>
  </el>

  <el>
    <name>checkInputs</name>
    <purpose>Lists input values for check case</purpose>
    <descrip>Specifies the contents of the input vector for the given check case.</descrip>
    <elRef elID="signal" num="oneplus"/>
  </el>

  <el>
    <name>internalValues</name>
    <purpose>A dump of internal model values for debugging check-cases</purpose>
    <descrip>
      Provides a set of all internal variable values to assist in debugging recalcitrant
      implementations of DAVE-ML import tools.
    </descrip>
    <elRef elID="signal" num="oneplus"/>
  </el>

  <el>
    <name>checkOutputs</name>
    <purpose>Lists output values for check case</purpose>
    <descrip>
      Specifies the contents of the output vector for the given check
      case.
    </descrip>
    <elRef elID="signal" num="oneplus"/>
  </el>

  <elLevel>5</elLevel>

  <el>
    <name>bpRef</name>
    <purpose>Reference to a breakpoint definition</purpose>
    <descrip>
      The bpRef element provides references to a previously-defined
      breakpoint set so breakpoints can be defined separately from,
      and reused by, several data tables.
    </descrip>
    <empty/>
    <attr name="bpID" type="idref" default="required">
      <attdef>The internal identifier for a breakpoint set definition.</attdef>
    </attr>
  </el>

  <el>
    <name>normalPDF</name>
    <purpose>Defines a normal (Gaussian) probability density
    function</purpose>
    <descrip>
      In a normally distributed random variable, a symmetrical
      distribution of given standard deviation is assumed about the
      nominal value (which is given elsewhere in the parent element).

      The correlatesWith sub-element references other functions or
      variables that have a linear correlation to the current
      parameter or function. The correlation sub-element specifies the
      correlation coefficient and references the other function or
      variable whose random value helps determine the value of this
      parameter.
    </descrip>
    <sequence>
      <elRef elID="bounds" num="one"/>
      <elRef elID="correlatesWith" num="zeroplus"/>
      <elRef elID="correlation" num="zeroplus"/>
    </sequence>
    <attr name="numSigmas" type="cdata" default="required">
      <attdef>Indicates how many standard deviations is represented by
      the uncertainty values given later. Integer value &gt; 0.</attdef>
    </attr>
  </el>

  <el>
    <name>uniformPDF</name>
    <purpose>Defines a uniform (constant) probability density
    function</purpose>
    <descrip>
      In a uniformly distributed random variable, the value of the
      parameter has equal likelihood of assuming any value within the
      (possibly asymmetric, implied by specifying two) bounds, which
      must bracket the nominal value (which is given elsewhere in the
      parent element).
    </descrip>
    <elRef elID="bounds" num="oneplus"/>
  </el>

  <el>
    <name>bounds</name>
    <purpose>Describes limits or standard deviations of statistical
    uncertainties</purpose>
    <descrip>
      This element contains some description of the statistical limits
      to the values the citing parameter element might take on. This
      can be in the form of a scalar value, a private dataTable, or a
      variableRef. In the more common instance, this element will
      either be a scalar constant value or a simple table whose
      dimensions must match the parent nominal function table and
      whose independent variables are identical to the nominal
      table. It is also possible that this limit be determined by an
      independent variable, either previously defined or defined
      in-line with this element. It does not make sense to have a
      dataTable cited if this bounds element is associated with
      anything other than an identically shaped function table.
    </descrip>
    <choice num='zeroplus'>
      <data/>
      <elRef elID="dataTable"/>
      <elRef elID="variableDef"/>
      <elRef elID="variableRef"/>
    </choice>
  </el>

  <el>
    <name>correlatesWith</name>
    <purpose>Identifies other functions or variables whose uncertainty correlates
    with our random value</purpose>
    <descrip>
      When present, this element indicates the parent function or
      variable is correlated with the referenced other function or
      variable in a linear sense.  This alerts the application that
      the random number used to calculate this function's or variable's
      immediate value will be used to calculate another function's or
      variable's value.
    </descrip>
    <empty/>
    <attr name="varID" type="idref" default="required">
      <attdef>Identifies the variable or function output that will
      depend on this function's or variable's randomness.</attdef>
    </attr>
  </el>
   
  <el>
    <name>correlation</name>
    <purpose>
      Indicates the linear correlation of this function's or variable's
      randomness with a previously computed random variable
    </purpose>
    <descrip>
      When present, this element indicates the parent function or
      variable is correlated with the referenced other function or
      variable in a linear sense and gives the correlation
      coefficient for determining this function's random value based
      upon the correlating function(s)'s random value.
    </descrip>
    <empty/>
    <attr name="varID" type="idref" default="required">
      <attdef>Identifies the variable or function output that helps
      determine the value of this random variable or function.</attdef>
    </attr>
    <attr name="corrCoef" type="cdata" default="required">
      <attdef>Indicates the amount of correlation between this
      variable and the referenced variable. The value should be
      between &#8722;1 and +1; 0 indicates no correlation, +1 indicates
      perfect correlation and &#8722;1 indicates inverse (negative)
      correlation.</attdef>
    </attr>
  </el>

  <el>
    <name>signal</name>
    <purpose>Documents an internal DAVE-ML signal (value, units, etc.)</purpose>
    <descrip>
      This element is used to document the name, ID, value, tolerance,
      and units of measure for check-cases. When used with checkInputs
      or checkOutputs, the signalName sub-element must be present
      (since check cases are viewed from "outside" the model); when
      used in an internalValues element, the varID sub-element should
      be used to identify the signal by its model-unique internal
      reference. When used in a checkOutputs vector, the tol element
      must be present. Tolerance is specified as a maximum absolute
      difference between the expected and actual value.

      The signalID sub-element is now deprecated in favor of the more
      consistent varID.
    </descrip>
    <sequence>
      <choice>
        <sequence>
          <elRef elID="signalName" num="one"/>
          <elRef elID="signalUnits" num="one"/>
        </sequence>
        <sequence>
          <choice>
            <elRef elID="varID" num="one"/>
            <elRef elID="signalID" num="one"/>
          </choice>
        </sequence>
      </choice>
      <elRef elID="signalValue" num="one"/>
      <elRef elID="tol" num="binary"/>
    </sequence>
  </el>

  <elLevel>6</elLevel>

  <el>
    <name>signalName</name>
    <purpose>Gives the external name of an input or output signal</purpose>
    <descrip>
      Used inside a checkCase element to specify the input or output
      variable name
    </descrip>
    <data/>
  </el>

  <el>
    <name>signalID</name>
    <purpose>Gives the internal identifier of a varDef [Deprecated]</purpose>
    <descrip>
      Used to specify the input or output varID. Now deprecated; reuse
      of varID is best practice.
    </descrip>
    <data/>
    <future>
      The signalID element has been deprecated with 2.0 in favor of
      the more consistent varID element and will be unsupported in a
      future release of this specification.
    </future>
    <deprecated/>
  </el>

  <el>
    <name>varID</name>
    <purpose>Gives the internal identifier of a varDef</purpose>
    <descrip>
      Used to specify the input or output varID. Replaces earlier
      signalID element.
    </descrip>
    <data/>
  </el>

  <el>
    <name>signalUnits</name>
    <purpose>Gives the unit-of-measure of an input or output variable</purpose>
    <descrip>
      Used inside a checkCase element to specify the units-of-measure
      for an input or output variable, for verification of proper
      implementation of a model.
    </descrip>
    <data/>
  </el>

  <el>
    <name>signalValue</name>
    <purpose>Gives the value of a check-case signal/variable</purpose>
    <descrip>
      Used to give the current value of an internal signal or
      input/output variable, for verification of proper implementation
      of a model.
    </descrip>
    <data/>
  </el>

  <el>
    <name>tol</name>
    <purpose>Specifies the tolerance of value matching for model verification</purpose>
    <descrip>
      This element specifies the allowable tolerance of error in an
      output value such that the model can be considered verified. It
      is assumed all uncertainty is removed in performing the model
      calculations. Tolerance is specified as a maximum absolute
      difference between the expected and actual value.
    </descrip>
    <data/>
  </el>

</dtd>

